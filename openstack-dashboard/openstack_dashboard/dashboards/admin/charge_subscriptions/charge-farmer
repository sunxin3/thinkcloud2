#!/usr/bin/python
# -*- coding: utf8 -*-

import sys
import time

from sqlalchemy.orm import sessionmaker
from nova.db import *
from nova.db.sqlalchemy import models
from sqlalchemy import create_engine
from django.utils import datetime_safe
from datetime import timedelta
from openstack_dashboard.openstack.common.mail import send_mail

engine = create_engine('mysql://root:123qwe@localhost/nova', echo=True)

Session = sessionmaker(bind=engine)
session = Session()

if __name__ == '__main__':
    mail_to_list = ["chenzg4@lenovo.com", "sunxin3@lenovo.com"]
    mail_host="localhost"

    while True:
#        current_time = utils.utcnow()
#        print "-" * 30, str(current_time)
        print "------------ farming ----------"

        tomorrow = datetime_safe.datetime.now() + timedelta(days=10)
        expiration = datetime_safe.datetime.isoformat(tomorrow)
	print expiration
	print "xxxxx"
        send_mail(mail_to_list, "test", "Think Cloud Register Mail", "xxxxx")

	charge_subscriptions = session.query(models.ChargeSubscription).all()
        for sub in charge_subscriptions:
            subscription_id = sub['id']
            status = sub['status']
            tenant_id = sub['project_id']
            resource_uuid = sub['resource_uuid']
            created_at = sub['created_at']
            updated_at = sub['updated_at']
            expires_at = sub['expires_at']
#	    if status == 'verified'
#            if expires_at > current_time:
#                continue
#            product = sub['product']
#            if product is None:
#                print "product is None, subid=" + str(sub.id)
#                continue
	    print status

            #order_unit = sub['product']['order_unit']
            #order_size = sub['product']['order_size']
            #price = sub['product']['price']
            #currency = sub['product']['currency']

            #region_name = sub['product']['region']['name']
            #item_name = sub['product']['item']['name']
            #pay_type = sub['product']['payment_type']
            #interval_unit = pay_type['interval_unit']
            #interval_size = pay_type['interval_size']
            #is_prepaid = pay_type['is_prepaid']
            '''subscriptions.append([subscription_id, status, tenant_id,
                                  resource_uuid, created_at, updated_at,
                                  expires_at, order_unit, order_size,
                                  price, currency, region_name, item_name,
                                  interval_unit, interval_size, is_prepaid])'''


        '''for (subscription_id, status, tenant_id, resource_uuid,
             created_at, updated_at, expires_at, order_unit,
             order_size, price, currency, region_name, item_name,
             interval_unit, interval_size, is_prepaid) in subscriptions:
            print "-" * 20
            print "farming:subid=", subscription_id, "resid=", resource_uuid, "tid=", tenant_id
            print "item_name=", item_name

            action = getattr(api, status)
            try:
                action(context, subscription_id, tenant_id, item_name, resource_uuid,
                   created_at, updated_at, expires_at, order_unit,
                   order_size, price, currency, region_name,
                   interval_unit, interval_size, is_prepaid)
            except Exception, e:
                print e, subscription_id, item_name'''
        print "<END>"
        #change the refresh time for charge geyg----sunxin
        time.sleep(10)
